% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gsv4_object.R
\name{gsv4_CellFormat}
\alias{gsv4_CellFormat}
\title{gsv4_CellFormat}
\usage{
gsv4_CellFormat(backgroundColor = NULL, borders = NULL,
  horizontalAlignment = NULL, hyperlinkDisplayType = NULL,
  numberFormat = NULL, padding = NULL, textDirection = NULL,
  textFormat = NULL, textRotation = NULL, verticalAlignment = NULL,
  wrapStrategy = NULL)
}
\arguments{
\item{backgroundColor}{\code{\link{gsv4_Color}} object. Represents a color in the RGBA color space. This representation is designed
for simplicity of conversion to/from color representations in various
languages over compactness; for example, the fields of this representation
can be trivially provided to the constructor of "java.awt.Color" in Java; it
can also be trivially provided to UIColor's "+colorWithRed:green:blue:alpha"
method in iOS; and, with just a little work, it can be easily formatted into
a CSS "rgba()" string in JavaScript, as well. Here are some examples:

Example (Java):

     import com.google.type.Color;

     // ...
     public static java.awt.Color fromProto(Color protocolor) {
       float alpha = protocolor.hasAlpha()
           ? protocolor.getAlpha().getValue()
           : 1.0;

       return new java.awt.Color(
           protocolor.getRed(),
           protocolor.getGreen(),
           protocolor.getBlue(),
           alpha);
     }

     public static Color toProto(java.awt.Color color) {
       float red = (float) color.getRed();
       float green = (float) color.getGreen();
       float blue = (float) color.getBlue();
       float denominator = 255.0;
       Color.Builder resultBuilder =
           Color
               .newBuilder()
               .setRed(red / denominator)
               .setGreen(green / denominator)
               .setBlue(blue / denominator);
       int alpha = color.getAlpha();
       if (alpha != 255) {
         result.setAlpha(
             FloatValue
                 .newBuilder()
                 .setValue(((float) alpha) / denominator)
                 .build());
       }
       return resultBuilder.build();
     }
     // ...

Example (iOS / Obj-C):

     // ...
     static UIColor* fromProto(Color* protocolor) {
        float red = [protocolor red];
        float green = [protocolor green];
        float blue = [protocolor blue];
        FloatValue* alpha_wrapper = [protocolor alpha];
        float alpha = 1.0;
        if (alpha_wrapper != nil) {
          alpha = [alpha_wrapper value];
        }
        return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];
     }

     static Color* toProto(UIColor* color) {
         CGFloat red, green, blue, alpha;
         if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {
           return nil;
         }
         Color* result = [Color alloc] init];
         [result setRed:red];
         [result setGreen:green];
         [result setBlue:blue];
         if (alpha <= 0.9999) {
           [result setAlpha:floatWrapperWithValue(alpha)];
         }
         [result autorelease];
         return result;
    }
    // ...

 Example (JavaScript):

    // ...

    var protoToCssColor = function(rgb_color) {
       var redFrac = rgb_color.red || 0.0;
       var greenFrac = rgb_color.green || 0.0;
       var blueFrac = rgb_color.blue || 0.0;
       var red = Math.floor(redFrac * 255);
       var green = Math.floor(greenFrac * 255);
       var blue = Math.floor(blueFrac * 255);

       if (!('alpha' in rgb_color)) {
          return rgbToCssColor_(red, green, blue);
       }

       var alphaFrac = rgb_color.alpha.value || 0.0;
       var rgbParams = [red, green, blue].join(',');
       return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');
    };

    var rgbToCssColor_ = function(red, green, blue) {
      var rgbNumber = new Number((red << 16) | (green << 8) | blue);
      var hexString = rgbNumber.toString(16);
      var missingZeros = 6 - hexString.length;
      var resultBuilder = ['#'];
      for (var i = 0; i < missingZeros; i++) {
         resultBuilder.push('0');
      }
      resultBuilder.push(hexString);
      return resultBuilder.join('');
    };

    // ...}

\item{borders}{\code{\link{gsv4_Borders}} object. The borders of the cell.}

\item{horizontalAlignment}{string. The horizontal alignment of the value in the cell. horizontalAlignment must take one of the following values: HORIZONTAL_ALIGN_UNSPECIFIED, LEFT, CENTER, RIGHT
See the details section for the definition of each of these values.}

\item{hyperlinkDisplayType}{string. How a hyperlink, if it exists, should be displayed in the cell. hyperlinkDisplayType must take one of the following values: HYPERLINK_DISPLAY_TYPE_UNSPECIFIED, LINKED, PLAIN_TEXT
See the details section for the definition of each of these values.}

\item{numberFormat}{\code{\link{gsv4_NumberFormat}} object. The number format of a cell.}

\item{padding}{\code{\link{gsv4_Padding}} object. The amount of padding around the cell, in pixels.
When updating padding, every field must be specified.}

\item{textDirection}{string. The direction of the text in the cell. textDirection must take one of the following values: TEXT_DIRECTION_UNSPECIFIED, LEFT_TO_RIGHT, RIGHT_TO_LEFT
See the details section for the definition of each of these values.}

\item{textFormat}{\code{\link{gsv4_TextFormat}} object. The format of a run of text in a cell.
Absent values indicate that the field isn't specified.}

\item{textRotation}{\code{\link{gsv4_TextRotation}} object. The rotation applied to text in a cell.}

\item{verticalAlignment}{string. The vertical alignment of the value in the cell. verticalAlignment must take one of the following values: VERTICAL_ALIGN_UNSPECIFIED, TOP, MIDDLE, BOTTOM
See the details section for the definition of each of these values.}

\item{wrapStrategy}{string. The wrap strategy for the value in the cell. wrapStrategy must take one of the following values: WRAP_STRATEGY_UNSPECIFIED, OVERFLOW_CELL, LEGACY_WRAP, CLIP, WRAP
See the details section for the definition of each of these values.}
}
\value{
CellFormat
}
\description{
The format of a cell.
}
\details{
horizontalAlignment takes one of the following values:
\itemize{
 \item{HORIZONTAL_ALIGN_UNSPECIFIED - The horizontal alignment is not specified. Do not use this.}
 \item{LEFT - The text is explicitly aligned to the left of the cell.}
 \item{CENTER - The text is explicitly aligned to the center of the cell.}
 \item{RIGHT - The text is explicitly aligned to the right of the cell.}
}

hyperlinkDisplayType takes one of the following values:
\itemize{
 \item{HYPERLINK_DISPLAY_TYPE_UNSPECIFIED - The default value: the hyperlink is rendered. Do not use this.}
 \item{LINKED - A hyperlink should be explicitly rendered.}
 \item{PLAIN_TEXT - A hyperlink should not be rendered.}
}

textDirection takes one of the following values:
\itemize{
 \item{TEXT_DIRECTION_UNSPECIFIED - The text direction is not specified. Do not use this.}
 \item{LEFT_TO_RIGHT - The text direction of left-to-right was set by the user.}
 \item{RIGHT_TO_LEFT - The text direction of right-to-left was set by the user.}
}

verticalAlignment takes one of the following values:
\itemize{
 \item{VERTICAL_ALIGN_UNSPECIFIED - The vertical alignment is not specified.  Do not use this.}
 \item{TOP - The text is explicitly aligned to the top of the cell.}
 \item{MIDDLE - The text is explicitly aligned to the middle of the cell.}
 \item{BOTTOM - The text is explicitly aligned to the bottom of the cell.}
}

wrapStrategy takes one of the following values:
\itemize{
 \item{WRAP_STRATEGY_UNSPECIFIED - The default value, do not use.}
 \item{OVERFLOW_CELL - Lines that are longer than the cell width will be written in the next
cell over, so long as that cell is empty. If the next cell over is
non-empty, this behaves the same as CLIP. The text will never wrap
to the next line unless the user manually inserts a new line.
Example:

| First sentence. |
    | Manual newline that is very long. <- Text continues into next cell
    | Next newline.   |}
 \item{LEGACY_WRAP - This wrap strategy represents the old Google Sheets wrap strategy where
words that are longer than a line are clipped rather than broken. This
strategy is not supported on all platforms and is being phased out.
Example:

| Cell has a |
    | loooooooooo| <- Word is clipped.
    | word.      |}
 \item{CLIP - Lines that are longer than the cell width will be clipped.
The text will never wrap to the next line unless the user manually
inserts a new line.
Example:

| First sentence. |
    | Manual newline t| <- Text is clipped
    | Next newline.   |}
 \item{WRAP - Words that are longer than a line are wrapped at the character level
rather than clipped.
Example:

| Cell has a |
    | loooooooooo| <- Word is broken.
    | ong word.  |}
}
}
\seealso{
\href{https://developers.google.com/sheets/reference/rest/v4/spreadsheets#CellFormat}{Google's Documentation for CellFormat}
}

