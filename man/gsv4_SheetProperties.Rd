% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gsv4_object.R
\name{gsv4_SheetProperties}
\alias{gsv4_SheetProperties}
\title{gsv4_SheetProperties}
\usage{
gsv4_SheetProperties(sheetId = NULL, gridProperties = NULL, hidden = NULL,
  index = NULL, rightToLeft = NULL, sheetType = NULL, tabColor = NULL,
  title = NULL)
}
\arguments{
\item{sheetId}{integer. The ID of the sheet. Must be non-negative.
This field cannot be changed once set.}

\item{gridProperties}{\code{\link{gsv4_GridProperties}} object. Properties of a grid.}

\item{hidden}{logical. TRUE if the sheet is hidden in the UI, FALSE if it's visible.}

\item{index}{integer. The index of the sheet within the spreadsheet.
When adding or updating sheet properties, if this field
is excluded then the sheet will be added or moved to the end
of the sheet list. When updating sheet indices or inserting
sheets, movement is considered in "before the move" indexes.
For example, if there were 3 sheets (S1, S2, S3) in order to
move S1 ahead of S2 the index would have to be set to 2. A sheet
index update request will be ignored if the requested index is
identical to the sheets current index or if the requested new
index is equal to the current sheet index + 1.}

\item{rightToLeft}{logical. TRUE if the sheet is an RTL sheet instead of an LTR sheet.}

\item{sheetType}{string. The type of sheet. Defaults to GRID.
This field cannot be changed once set. sheetType must take one of the following values: SHEET_TYPE_UNSPECIFIED, GRID, OBJECT
See the details section for the definition of each of these values.}

\item{tabColor}{\code{\link{gsv4_Color}} object. Represents a color in the RGBA color space. This representation is designed
for simplicity of conversion to/from color representations in various
languages over compactness; for example, the fields of this representation
can be trivially provided to the constructor of "java.awt.Color" in Java; it
can also be trivially provided to UIColor's "+colorWithRed:green:blue:alpha"
method in iOS; and, with just a little work, it can be easily formatted into
a CSS "rgba()" string in JavaScript, as well. Here are some examples:

Example (Java):

     import com.google.type.Color;

     // ...
     public static java.awt.Color fromProto(Color protocolor) {
       float alpha = protocolor.hasAlpha()
           ? protocolor.getAlpha().getValue()
           : 1.0;

       return new java.awt.Color(
           protocolor.getRed(),
           protocolor.getGreen(),
           protocolor.getBlue(),
           alpha);
     }

     public static Color toProto(java.awt.Color color) {
       float red = (float) color.getRed();
       float green = (float) color.getGreen();
       float blue = (float) color.getBlue();
       float denominator = 255.0;
       Color.Builder resultBuilder =
           Color
               .newBuilder()
               .setRed(red / denominator)
               .setGreen(green / denominator)
               .setBlue(blue / denominator);
       int alpha = color.getAlpha();
       if (alpha != 255) {
         result.setAlpha(
             FloatValue
                 .newBuilder()
                 .setValue(((float) alpha) / denominator)
                 .build());
       }
       return resultBuilder.build();
     }
     // ...

Example (iOS / Obj-C):

     // ...
     static UIColor* fromProto(Color* protocolor) {
        float red = [protocolor red];
        float green = [protocolor green];
        float blue = [protocolor blue];
        FloatValue* alpha_wrapper = [protocolor alpha];
        float alpha = 1.0;
        if (alpha_wrapper != nil) {
          alpha = [alpha_wrapper value];
        }
        return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];
     }

     static Color* toProto(UIColor* color) {
         CGFloat red, green, blue, alpha;
         if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {
           return nil;
         }
         Color* result = [Color alloc] init];
         [result setRed:red];
         [result setGreen:green];
         [result setBlue:blue];
         if (alpha <= 0.9999) {
           [result setAlpha:floatWrapperWithValue(alpha)];
         }
         [result autorelease];
         return result;
    }
    // ...

 Example (JavaScript):

    // ...

    var protoToCssColor = function(rgb_color) {
       var redFrac = rgb_color.red || 0.0;
       var greenFrac = rgb_color.green || 0.0;
       var blueFrac = rgb_color.blue || 0.0;
       var red = Math.floor(redFrac * 255);
       var green = Math.floor(greenFrac * 255);
       var blue = Math.floor(blueFrac * 255);

       if (!('alpha' in rgb_color)) {
          return rgbToCssColor_(red, green, blue);
       }

       var alphaFrac = rgb_color.alpha.value || 0.0;
       var rgbParams = [red, green, blue].join(',');
       return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');
    };

    var rgbToCssColor_ = function(red, green, blue) {
      var rgbNumber = new Number((red << 16) | (green << 8) | blue);
      var hexString = rgbNumber.toString(16);
      var missingZeros = 6 - hexString.length;
      var resultBuilder = ['#'];
      for (var i = 0; i < missingZeros; i++) {
         resultBuilder.push('0');
      }
      resultBuilder.push(hexString);
      return resultBuilder.join('');
    };

    // ...}

\item{title}{string. The name of the sheet.}
}
\value{
SheetProperties
}
\description{
Properties of a sheet.
}
\details{
sheetType takes one of the following values:
\itemize{
 \item{SHEET_TYPE_UNSPECIFIED - Default value, do not use.}
 \item{GRID - The sheet is a grid.}
 \item{OBJECT - The sheet has no grid and instead has an object like a chart or image.}
}
}
\seealso{
\href{https://developers.google.com/sheets/reference/rest/v4/spreadsheets#SheetProperties}{Google's Documentation for SheetProperties}
}

